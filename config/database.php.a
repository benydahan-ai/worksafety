<?php
/**
 * WorkSafety.io - מערכת ניהול בטיחות תעשייתית
 * קובץ הגדרות מסד נתונים מתוקן עם פונקציות מלאות
 * 
 * @author WorkSafety.io Development Team
 * @version 1.2
 * @date 2025
 */

// הגדרת אזור זמן ישראל בתחילת הקובץ
date_default_timezone_set('Asia/Jerusalem');

// הגדרות מסד נתונים
define('DB_HOST', 'localhost');
define('DB_NAME', 'atarimst_worksafetydb');
define('DB_USER', 'atarimst_rootadmin');
define('DB_PASS', 'Shani@2025');
define('DB_CHARSET', 'utf8mb4');

// הגדרות מערכת
define('SITE_URL', 'https://worksafety.io');
define('SITE_NAME', 'WorkSafety.io');
define('SITE_DESCRIPTION', 'מערכת ניהול בטיחות תעשייתית מתקדמת');

// הגדרות אבטחה
define('SESSION_LIFETIME', 28800); // 8 שעות
define('PASSWORD_MIN_LENGTH', 8);
define('MAX_LOGIN_ATTEMPTS', 5);

/**
 * יצירת חיבור למסד הנתונים עם PDO
 */
class Database {
    private static $instance = null;
    private $connection;
    
    private function __construct() {
        try {
            $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=" . DB_CHARSET;
            
            $options = [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                PDO::ATTR_EMULATE_PREPARES => false,
                PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci"
            ];
            
            $this->connection = new PDO($dsn, DB_USER, DB_PASS, $options);
            
            // הגדרת אזור זמן במסד הנתונים - עדכון מתקדם יותר
            try {
                // קודם בודק אם אזור הזמן קיים במסד הנתונים
                $stmt = $this->connection->prepare("SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+03:00') as israel_time");
                $stmt->execute();
                $result = $stmt->fetch();
                
                if ($result && $result['israel_time']) {
                    // אזור זמן ישראל עם התחשבות בשעון קיץ/חורף
                    $this->connection->exec("SET time_zone = '+03:00'"); // קיץ
                    // או אפשר להשתמש ב: SET time_zone = 'Asia/Jerusalem' אם השרת תומך
                } else {
                    // ברירת מחדל - UTC+2 לחורף
                    $this->connection->exec("SET time_zone = '+02:00'");
                }
                
            } catch (PDOException $timezone_error) {
                // אם יש בעיה עם הגדרת אזור זמן, נמשיך בלי זה
                error_log("Warning: Could not set MySQL timezone: " . $timezone_error->getMessage());
            }
            
        } catch (PDOException $e) {
            error_log("Database connection error: " . $e->getMessage());
            die("שגיאה בחיבור למסד הנתונים. אנא נסה שוב מאוחר יותר.");
        }
    }
    
    /**
     * יצירת מופע יחיד (Singleton)
     */
    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * קבלת חיבור PDO
     */
    public function getConnection() {
        return $this->connection;
    }
    
    /**
     * ביצוע שאילתה עם פרמטרים
     */
    public function query($sql, $params = []) {
        try {
            $stmt = $this->connection->prepare($sql);
            $stmt->execute($params);
            return $stmt;
        } catch (PDOException $e) {
            error_log("Database query error: " . $e->getMessage() . " SQL: " . $sql);
            throw new Exception("שגיאה בביצוע השאילתה");
        }
    }
    
    /**
     * הכנסת נתונים לטבלה
     */
    public function insert($table, $data) {
        try {
            $columns = implode(', ', array_keys($data));
            $placeholders = ':' . implode(', :', array_keys($data));
            
            $sql = "INSERT INTO {$table} ({$columns}) VALUES ({$placeholders})";
            $stmt = $this->connection->prepare($sql);
            
            return $stmt->execute($data) ? $this->connection->lastInsertId() : false;
        } catch (PDOException $e) {
            error_log("Database insert error: " . $e->getMessage());
            throw new Exception("שגיאה בהוספת הנתונים");
        }
    }
    
    /**
     * עדכון נתונים בטבלה
     */
    public function update($table, $data, $where, $params = []) {
        try {
            $setParts = [];
            foreach (array_keys($data) as $key) {
                $setParts[] = "{$key} = :{$key}";
            }
            $setClause = implode(', ', $setParts);
            
            $sql = "UPDATE {$table} SET {$setClause} WHERE {$where}";
            $stmt = $this->connection->prepare($sql);
            
            // מיזוג פרמטרי data עם פרמטרי where
            $allParams = array_merge($data, $params);
            
            return $stmt->execute($allParams);
        } catch (PDOException $e) {
            error_log("Database update error: " . $e->getMessage());
            throw new Exception("שגיאה בעדכון הנתונים");
        }
    }
    
    /**
     * מחיקת נתונים מטבלה
     */
    public function delete($table, $where, $params = []) {
        try {
            $sql = "DELETE FROM {$table} WHERE {$where}";
            $stmt = $this->connection->prepare($sql);
            
            return $stmt->execute($params);
        } catch (PDOException $e) {
            error_log("Database delete error: " . $e->getMessage());
            throw new Exception("שגיאה במחיקת הנתונים");
        }
    }
    
    /**
     * קבלת רשומה אחת
     */
    public function fetchOne($sql, $params = []) {
        try {
            $stmt = $this->connection->prepare($sql);
            $stmt->execute($params);
            return $stmt->fetch();
        } catch (PDOException $e) {
            error_log("Database fetchOne error: " . $e->getMessage());
            throw new Exception("שגיאה בקבלת הנתונים");
        }
    }
    
    /**
     * קבלת כל הרשומות
     */
    public function fetchAll($sql, $params = []) {
        try {
            $stmt = $this->connection->prepare($sql);
            $stmt->execute($params);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Database fetchAll error: " . $e->getMessage());
            throw new Exception("שגיאה בקבלת הנתונים");
        }
    }
    
    /**
     * התחלת טרנזקציה
     */
    public function beginTransaction() {
        return $this->connection->beginTransaction();
    }
    
    /**
     * אישור טרנזקציה
     */
    public function commit() {
        return $this->connection->commit();
    }
    
    /**
     * ביטול טרנזקציה
     */
    public function rollback() {
        return $this->connection->rollback();
    }
    
    /**
     * בדיקה אם טבלה קיימת
     */
    public function tableExists($tableName) {
        try {
            $stmt = $this->connection->prepare("SHOW TABLES LIKE ?");
            $stmt->execute([$tableName]);
            return $stmt->fetch() !== false;
        } catch (PDOException $e) {
            error_log("Table exists check error: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * יצירת backup של טבלה
     */
    public function backupTable($tableName) {
        try {
            $backupName = $tableName . '_backup_' . date('Y_m_d_H_i_s');
            $sql = "CREATE TABLE {$backupName} AS SELECT * FROM {$tableName}";
            return $this->connection->exec($sql);
        } catch (PDOException $e) {
            error_log("Table backup error: " . $e->getMessage());
            throw new Exception("שגיאה ביצירת גיבוי הטבלה");
        }
    }
    
    /**
     * קבלת סטטיסטיקות מסד נתונים
     */
    public function getDatabaseStats() {
        try {
            $stats = [];
            
            // קבלת רשימת טבלאות
            $tables = $this->fetchAll("SHOW TABLES");
            $stats['total_tables'] = count($tables);
            
            // קבלת מידע על כל טבלה
            foreach ($tables as $table) {
                $tableName = array_values($table)[0];
                $tableInfo = $this->fetchOne("SELECT COUNT(*) as row_count FROM {$tableName}");
                $stats['tables'][$tableName] = $tableInfo['row_count'];
            }
            
            // קבלת גודל מסד הנתונים
            $sizeInfo = $this->fetchOne("
                SELECT 
                    ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS size_mb
                FROM information_schema.tables 
                WHERE table_schema = ?
            ", [DB_NAME]);
            
            $stats['database_size_mb'] = $sizeInfo['size_mb'];
            
            return $stats;
        } catch (PDOException $e) {
            error_log("Database stats error: " . $e->getMessage());
            return [];
        }
    }
    
    // מנע שכפול
    private function __clone() {}
    public function __wakeup() {}
}

/**
 * פונקציה גלובלית לקבלת חיבור מסד נתונים
 */
function getDB() {
    return Database::getInstance();
}

/**
 * פונקציות עזר נוספות
 */

/**
 * הצפנת סיסמה
 */
function hashPassword($password) {
    return password_hash($password, PASSWORD_DEFAULT);
}

/**
 * בדיקת סיסמה
 */
function verifyPassword($password, $hash) {
    return password_verify($password, $hash);
}

/**
 * יצירת token אקראי
 */
function generateToken($length = 32) {
    return bin2hex(random_bytes($length));
}

/**
 * ניקוי קלט משתמש
 */
function sanitizeInput($input) {
    if (is_array($input)) {
        return array_map('sanitizeInput', $input);
    }
    return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');
}

/**
 * ולידציה של אימייל
 */
function validateEmail($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL);
}

/**
 * ולידציה של מספר טלפון ישראלי
 */
function validateIsraeliPhone($phone) {
    $cleaned = preg_replace('/[^0-9]/', '', $phone);
    
    // מספר טלפון ישראלי - 10 ספרות שמתחילות ב-05 או 8-9 ספרות שמתחילות ב-0
    if (preg_match('/^05[0-9]{8}$/', $cleaned) || 
        preg_match('/^0[2-4,6-9][0-9]{7}$/', $cleaned)) {
        return true;
    }
    
    return false;
}

/**
 * פורמט תאריך לעברית
 */
function formatHebrewDate($date, $includeTime = false) {
    $timestamp = is_string($date) ? strtotime($date) : $date;
    
    if ($includeTime) {
        return date('d/m/Y H:i', $timestamp);
    } else {
        return date('d/m/Y', $timestamp);
    }
}

/**
 * יצירת לוג אבטחה
 */
function logSecurityEvent($event, $details = []) {
    $logEntry = [
        'timestamp' => date('Y-m-d H:i:s'),
        'event' => $event,
        'user_id' => $_SESSION['user_id'] ?? null,
        'ip_address' => $_SERVER['REMOTE_ADDR'] ?? 'unknown',
        'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? 'unknown',
        'details' => $details
    ];
    
    error_log("SECURITY EVENT: " . json_encode($logEntry));
}

/**
 * בדיקת הרשאות משתמש
 */
function checkUserPermission($permission, $userId = null) {
    if (!$userId) {
        $userId = $_SESSION['user_id'] ?? null;
    }
    
    if (!$userId) {
        return false;
    }
    
    try {
        $db = getDB();
        $result = $db->fetchOne("
            SELECT COUNT(*) as has_permission
            FROM user_permissions up
            JOIN permissions p ON up.permission_id = p.id
            WHERE up.user_id = ? 
            AND p.permission_name = ? 
            AND up.is_active = 1
        ", [$userId, $permission]);
        
        return $result['has_permission'] > 0;
    } catch (Exception $e) {
        error_log("Permission check error: " . $e->getMessage());
        return false;
    }
}

/**
 * יצירת URL בטוח
 */
function createSecureUrl($path, $params = []) {
    $url = SITE_URL . '/' . ltrim($path, '/');
    
    if (!empty($params)) {
        $url .= '?' . http_build_query($params);
    }
    
    return $url;
}

/**
 * בדיקת CSRF token
 */
function validateCSRFToken($token) {
    return isset($_SESSION['csrf_token']) && 
           hash_equals($_SESSION['csrf_token'], $token);
}

/**
 * יצירת CSRF token
 */
function generateCSRFToken() {
    if (!isset($_SESSION['csrf_token'])) {
        $_SESSION['csrf_token'] = generateToken();
    }
    return $_SESSION['csrf_token'];
}

/**
 * הגדרת session בטוח
 */
function initSecureSession() {
    // הגדרות session בטוחות
    ini_set('session.cookie_httponly', 1);
    ini_set('session.cookie_secure', 1);
    ini_set('session.use_strict_mode', 1);
    ini_set('session.cookie_samesite', 'Strict');
    
    // התחלת session אם לא התחיל
    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
    
    // רענון session ID מעת לעת
    if (!isset($_SESSION['created_at'])) {
        $_SESSION['created_at'] = time();
    } elseif (time() - $_SESSION['created_at'] > 1800) { // 30 דקות
        session_regenerate_id(true);
        $_SESSION['created_at'] = time();
    }
}

/**
 * יצירת thumbnail לתמונה
 */
function createImageThumbnail($sourcePath, $destPath, $maxWidth = 150, $maxHeight = 150) {
    try {
        $imageInfo = getimagesize($sourcePath);
        if (!$imageInfo) return false;
        
        $originalWidth = $imageInfo[0];
        $originalHeight = $imageInfo[1];
        $mimeType = $imageInfo['mime'];
        
        // חישוב גודל חדש
        $ratio = min($maxWidth / $originalWidth, $maxHeight / $originalHeight);
        $newWidth = round($originalWidth * $ratio);
        $newHeight = round($originalHeight * $ratio);
        
        // יצירת תמונה חדשה
        $newImage = imagecreatetruecolor($newWidth, $newHeight);
        
        // טעינת התמונה המקורית
        switch ($mimeType) {
            case 'image/jpeg':
                $sourceImage = imagecreatefromjpeg($sourcePath);
                break;
            case 'image/png':
                $sourceImage = imagecreatefrompng($sourcePath);
                imagealphablending($newImage, false);
                imagesavealpha($newImage, true);
                break;
            case 'image/gif':
                $sourceImage = imagecreatefromgif($sourcePath);
                break;
            default:
                return false;
        }
        
        if (!$sourceImage) return false;
        
        // שינוי גודל
        imagecopyresampled($newImage, $sourceImage, 0, 0, 0, 0, 
                          $newWidth, $newHeight, $originalWidth, $originalHeight);
        
        // שמירה
        $success = false;
        switch ($mimeType) {
            case 'image/jpeg':
                $success = imagejpeg($newImage, $destPath, 85);
                break;
            case 'image/png':
                $success = imagepng($newImage, $destPath, 9);
                break;
            case 'image/gif':
                $success = imagegif($newImage, $destPath);
                break;
        }
        
        imagedestroy($sourceImage);
        imagedestroy($newImage);
        
        return $success;
    } catch (Exception $e) {
        error_log("Thumbnail creation error: " . $e->getMessage());
        return false;
    }
}

// אתחול session בטוח
initSecureSession();
